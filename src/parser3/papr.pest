WHITESPACE = _{ " " | "\t" | "\n" | "\r" }

line_comment  = _{ "//" ~ (!"\n" ~ ANY)* ~ "\n" }
block_comment = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
COMMENT       = _{ line_comment | block_comment }

// operators
add      =  { "+" }
sub      =  { "-" }
mul      =  { "*" }
div      =  { "/" }
gt       =  { ">" }
lt       =  { "<" }
eq       =  { "==" }
neq      =  { "!=" }
and      =  { "&" }
or       =  { "|" }
xor      =  { "^" }
rem      =  { "%" }
infix_op = _{ add | sub | mul | div | gt | lt | eq | neq | and | or | xor | rem }

// signal rates
audio_rate   = @{ "@" }
control_rate = @{ "#" }
signal_rate  =  { audio_rate | control_rate }

// atomic types
int            = @{ ASCII_DIGIT+ }
scalar         = @{ int ~ ("." ~ int)? }
char           =  { !"\"" ~ ANY }
string_inner   = @{ char* }
string         = ${ "\"" ~ string_inner ~ "\"" }
ident_raw      = @{ "_"* ~ ASCII_ALPHA ~ ("_" | ASCII_ALPHA | ASCII_DIGIT)* }
graph_name_raw = @{ ASCII_ALPHA_UPPER ~ ident_raw }

// rated idents
ident      = { signal_rate? ~ ident_raw }
graph_name = { signal_rate? ~ graph_name_raw }

// imports
import_stmt = { "import" ~ string }

// calls
creation_args = { "<" ~ ((scalar | string) ~ ",")* ~ (scalar | string) ~ ">" }
call          = { graph_name ~ creation_args? ~ "(" ~ (expr ~ ",")* ~ expr? ~ ")" }

// exprs
expr         =  { primary_expr ~ (infix_op ~ primary_expr)* }
primary_expr = _{ "(" ~ expr ~ ")" | call | ident | scalar }

// connections
list           = { "[" ~ (ident ~ ",")* ~ ident ~ "]" }
connection_lhs = { list | ident }
connection     = { connection_lhs ~ "=" ~ expr ~ ";" }

// statements
let_statement   = { "let" ~ connection }
statement       = { let_statement | connection }
statement_block = { "~" ~ "{" ~ statement* ~ "}" }

// signatures
inputs    = { "(" ~ (ident ~ ",")* ~ ident? ~ ")" }
outputs   = { "(" ~ (ident ~ ",")* ~ ident? ~ ")" }
signature = { inputs ~ "->" ~ outputs }

// graphs
graph_def = { "graph" ~ graph_name ~ "{" ~ signature ~ statement_block ~ "}" }

// main
main = { SOI ~ import_stmt* ~ graph_def* ~ EOI }
